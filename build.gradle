/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.8.3/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'java'
    id 'idea'
    id 'eclipse'
}

startScripts.enabled = false
run.enabled = false

repositories {
    mavenCentral()
    //mavenLocal()
    flatDir {
        dirs 'lib'
    }
}

dependencies {
    implementation fileTree(dir: 'lib', include: '*.jar')  // for including my SEMPv1 utils
    implementation group: 'com.solacesystems', name: 'sol-jcsmp', version: '10.+'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.19.0'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.19.0'
    // needed to 'bridge' the JCSMP API logs from JCL to log4j
    implementation group: 'org.apache.logging.log4j', name: 'log4j-jcl', version: '2.19.0'
    implementation group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'
    //implementation group: 'org.eclipse.paho', name: 'org.eclipse.paho.mqttv5.client', version: '1.2.5'
    implementation group: 'org.json', name: 'json', version: '20230227'
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            srcDir 'src/dist/config'  // so eclipse can find the log4j2.xml file
        }
    }
}

// Download context sensitive help and/or source code for eclipse and idea
eclipse {
    classpath {
        downloadJavadoc = true
        downloadSources = true
    }
    jdt {
        //if you want to alter the java versions (by default they are configured with gradle java plugin settings):
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

tasks.withType(JavaCompile).all {
    options.compilerArgs.add("-Xlint:all")
    options.encoding = 'UTF-8'
}

// used to make the various start/run scripts
def scripts = [
    'PQPublisher':'dev.solace.pqdemo.PQPublisher',
    'PQSubscriber':'dev.solace.pqdemo.PQSubscriber',
    'OrderChecker':'dev.solace.pqdemo.OrderChecker2',
    'StatefulControl':'dev.solace.pqdemo.StatefulControl',
    'Test':'dev.solace.pqdemo.Test',
    'Command':'dev.solace.pqdemo.Command'
]
// for each of those array entries, let's make a start script
scripts.each() { scriptName, className ->
    def t = tasks.create(name: scriptName+'StartScript', type: CreateStartScripts) {
        mainClass = className
        applicationName = scriptName
        outputDir = new File(project.buildDir, 'scripts')
        classpath = jar.outputs.files + project.configurations.runtimeClasspath
        classpath += files('src/dist/config')  // this is where our log4j2.xml file will be
        doLast {  // necessary since Gradle assumes all classpath are under 'lib', need to modify
          def windowsScriptFile = file getWindowsScript()
          def unixScriptFile = file getUnixScript()
          windowsScriptFile.text = windowsScriptFile.text.replace('%APP_HOME%\\lib\\config', '%APP_HOME%\\config')
          unixScriptFile.text = unixScriptFile.text.replace('$APP_HOME/lib/config', '$APP_HOME/config')
        }
        defaultJvmOpts = ['-ea', '-Dlogfile_name='+applicationName]  // enable assertions and set filename
        //optsEnvironmentVar = '-Dlog-file-name=\$APP_NAME'
    }
    application {
        applicationDistribution.into("bin") {
            from(t)
            //fileMode = 0755
            duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        }
    }
}

installDist {
    destinationDir = new File(project.buildDir, 'staged')
}

assemble.dependsOn installDist
